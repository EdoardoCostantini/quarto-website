---
draft: false
title: Estimating ridge regression in R
author: Edoardo Costantini
date: '2022-02-28'
slug: ridge
categories: ["Penalty"]
bibliography: ../../resources/bibshelf.bib
---

# Introduction

When there are many correlated predictors in a linear regression model, their regression coefficients can become poorly determined and exhibit high variance.
This problem can be alleviated by imposing a size constraint (or penalty) on the coefficients.
Ridge regression shrinks the regression coefficients by imposing a penalty on their size.
The ridge coefficients values minimize a penalized residual sum of squares:

$$
\hat{\beta}^{\text{ridge}} = \text{argmin}_{\beta} \left\{ \sum_{i=1}^{N} \left( y_i - \beta_0 - \sum_{j=1}^{p} x_{ij}\beta_j \right)^2 + \lambda \sum_{j=1}^{p}\beta_j^2 \right\}
$$

The ridge solutions are not equivariant under scaling of the inputs.
Therefore, it is recommended to standardize the inputs before solving the minimization problem.

Notice that the intercept $\beta_0$ has been left out of the penalty term.
Penalization of the intercept would make the procedure depend on the origin chosen for $Y$.
Furthermore, by centering the predictors, we can separate the solution to the [minimazion problem](https://www.notion.so/Ridge-regression-8134d8babda5413ab182df645c6196a8) into two parts:

1. Intercept
$$
\hat{\beta}_0 = \bar{y}=\frac{1}{N}\sum_{i = 1}^{N} y_i
$$

2. Penalised regression coefficients
$$
\hat{\beta}^{\text{ridge}}=(\mathbf{X}^T\mathbf{X} + \lambda \mathbf{I})^{-1}\mathbf{X}^Ty
$$
which is the regular way of estimating regression coefficients with a penalty term ($\lambda$) added on the diagonal ($\mathbf{I}$) of the cross-product matrix ($\mathbf{X}^T\mathbf{X}$) to make it invertible ($(...)^{-1}$).

# Learn by coding

The `glmnet` package can be used to obtain the ridge regression estimates of the regression coefficients.
In this section, we will first see how to obtain these estimates "manually", that is coding every step on our own, and then we will see how to obtain the same results using the `glmnet` package.

Let's start by setting up the R environment.
In this post, we will work with the `mtcars` data.
If you are not familiar with it, just look up the R help file on it.
We will use the first column of the dataset (variable named `mpg`) as a dependent variable and the remaining ones as predictors in a linear regression.
```{r set up, results = 'hide', message = FALSE, warning = FALSE}
# Set up -----------------------------------------------------------------------

# Load packages
library(glmnet)

# Take the mtcars data
y <- mtcars[, "mpg"]
X <- mtcars[, -1]

# Create a few shorthands we will use
n <- nrow(X)
p <- ncol(X)

```

## Fitting ridge regression manually
First, let's make sure the predictors are centered on the mean and scaled to have a variance of 1.


```{r scale predictors}
# Fitting ridge regression manually --------------------------------------------

# Scale the data (standardize)
X_scale <- scale(X, center = TRUE, scale = TRUE)

```

Then, we want to **fit the ridge regression** manually by separating the intercept and the regression coefficients estimation (two-step approach):

1. Estimate the intercept ($\hat{\beta}_0$)

    ```{r intercept}
    # Estimate the intercept
    b0_hat_r <- mean(y)

    ```

2. Estimate the ridge regression coefficients ($\hat{\beta}^{\text{ridge}}$).

  a. Compute the cross-product matrix of the predictors.

        This is the same step we would take if we wanted to compute the OLS estimates.
        ```{r cross-product matrix}

        # Compute the cross-product matrix of the data
        XtX <- t(X_scale) %*% X_scale

        ```

  b. Define a value of $\lambda$.

        This value is usually chosen by cross-validation from a grid of possible values.
        However, here we are only interested in how $\lambda$ is used in the computation, so we can simply give it a fixed value.
        ```{r lambda}
        # Define a lambda value
        lambda <- .1

        ```

  c. Compute $\hat{\beta}^{\text{ridge}}$.

        ```{r compute ridge estimates}
        # Estimate the regression coefficients with the ridge penalty
        bs_hat_r <- solve(XtX + lambda * diag(p)) %*% t(X_scale) %*% y

        ```
        where `diag(p)` is the identity matrix $\mathbf{I}$.

Finally, let's print the results:

```{r print manual estimates}
# Print the results
round(
  data.frame(twostep = c(b0 = b0_hat_r,
                         b = bs_hat_r)),
  3
)

```


It is important to note the effect of centering and scaling.
When fitting ridge regression, many sources recommend centering the data.
This allows separating the estimation of the intercept from the estimation of the regression coefficients.
As a result, only the regression coefficients are penalised.
To understand the effect of centering, consider what happens in regular OLS estimation when **predictors are centered**:
```{r centering X}
# Centering in regular OLS -----------------------------------------------------

# Create a version of X that is centered
X_center <- scale(X, center = TRUE, scale = FALSE)

# Fit an regular linear model
lm_ols <- lm(y ~ X_center)

# Check that b0 is equal to the mean of y
coef(lm_ols)["(Intercept)"] - mean(y)

```

Furthermore, let's see what would have happened if we had penalised the intercept as well.

```{r penalising the intercept}
# Consequence of penalising the intercept --------------------------------------

# Add a vector of 1s to penalise the intercept
X_scale_w1 <- cbind(1, X_scale)

# Compute the cross-product matrix of the data
XtX <- t(X_scale_w1) %*% X_scale_w1

# Estimate the regression coefficients with the ridge penalty
bs_hat_r_w1 <- solve(XtX + lambda * diag(p+1)) %*% t(X_scale_w1) %*% y

# Print the results
round(
  data.frame(twostep = c(b0 = b0_hat_r,
                         b = bs_hat_r),
             onestep = c(b0 = bs_hat_r_w1[1],
                         b = bs_hat_r_w1[-1])),
  3
)

```

As you see, the intercept would be shrunk toward zero, without any benefit.
As a result, any prediction would also be offset by the same amount.

### An alternative way to avoid penalising the intercept
It can be handy to obtain estimates of the regression coefficients and intercept in one step.
We can use matrix algebra and R to simplify the two-step procedure to a single step.
In particular, we can avoid the penalisation of the intercept by setting to 0 the first element of the "penalty" matrix `lambda * diag(p + 1)`.

```{r augmented design matrix}
# Alternative to avoid penalization of the intercept ---------------------------

# Compute cross-product matrix
XtX <- crossprod(X_scale_w1)

# Create penalty matrix
pen <- lambda * diag(p + 1)

# replace first element with 0
pen[1, 1] <- 0

# Obtain standardized estimates
bs_hat_r2 <- solve(XtX + pen) %*% t(X_scale_w1) %*% (y)

# Compare
round(
        data.frame(
                twostep = c(b0 = b0_hat_r, b = bs_hat_r),
                onestep = c(b0 = bs_hat_r2[1], b = bs_hat_r2[-1])
        ),
        3
)

```
## Fit ridge regression with glmnet
The most popular R package to fit regularised regression is `glmnet`.
Let's see how we can replicate the results we obtained with the manual approach with glmnet.
There are three important differences to consider:

- `glmnet` uses the [biased sample variance estimate](https://en.wikipedia.org/wiki/Variance#Biased_sample_variance) when scaling the predictors;
- `glmnet` returns the unstandardized regression coefficients;
- `glmnet` uses a different parametrization for $\lambda$.

To obtain the same results with the manual approach and `glmnet` we need to account for these.

### Use the biased estimation of variance
First, let's use the biased sample variance estimate in computing $\hat{\beta}^{\text{ridge}}$ with the manual approach:

```{r biased variance}
# Fitting ridge manually with biased variance estimation -----------------------

# Standardize X
X_scale <- sapply(1:p, function (j){
  muj <- mean(X[, j])                  # mean
  sj <- sqrt( var(X[, j]) * (n-1) / n) # (biased) sd
  (X[, j] - muj) / sj                  # center and scale
})

# Craete the desing matrix
X_scale_dm <- cbind(1, X_scale)

# Compute cross-product matrix
XtX <- crossprod(X_scale_dm)

# Create penalty matrix
pen <- lambda * diag(p + 1)
pen[1, 1] <- 0

# Obtain standardized estimates
bs_hat_r3 <- solve(XtX + pen) %*% t(X_scale_dm) %*% (y)

# Print results
round(
      data.frame(
              manual = c(b0 = bs_hat_r3[1], b = bs_hat_r3[-1])
      ),
      3
)

```

### Return the unstandardized coefficients
Next, we need to revert these regression coefficients to their original scale.
Since we are estimating the regression coefficients on the scaled data, they are computed on the standardized scale.
```{r Unstandardize coefs}
# Return the  unstandardized coefficients --------------------------------------

# Extract the original mean and standard deviations of all X variables
mean_x <- colMeans(X)
sd_x <- sqrt(apply(X, 2, var) * (n - 1) / n) # biased version

# Revert to original scale
bs_hat_r4 <- c(bs_hat_r3[1] - crossprod(mean_x, bs_hat_r3[-1] / sd_x),
               bs_hat_r3[-1] / sd_x)

# Compare manual standardized and unstandardized results
round(
      data.frame(
              standardized = c(b0 = bs_hat_r3[1], b = bs_hat_r3[-1]),
              unstandardized = c(b0 = bs_hat_r4[1], b = bs_hat_r4[-1])
      ),
      3
)

```

### Adjust the parametrization of $\lambda$ for `glmnet`
Next, we need to understand the relationship between the $\lambda$ parametrization we used and the one used by `glmnet`.
The following code shows that if we want to use a given value of `lambda` in `glmnet` we need to multiply it by the standard deviation of the dependent variable (`sd_y`) and divide it by the sample size (`n`).

```{r adjust lambda glmnet}
# Adjust the parametrization of lambda -----------------------------------------

# Extract the original mean and standard deviations of y (for lambda parametrization)
mean_y <- mean(y)
sd_y <- sqrt(var(y) * (n - 1) / n)

# Compute the value glmnet wants for your target lambda
lambda_glmnet <- sd_y * lambda / n

```

### Compare manual and `glmnet` ridge regression output

Finally, we can compare the results:
```{r copmare fits}
# Fitting ridge regression with glmnet -----------------------------------------

# Fit glmnet
fit_glmnet_s <- glmnet(x = X,
                       y = y,
                       alpha = 0,
                       lambda = lambda_glmnet, # correction for how penalty is used
                       thresh = 1e-20)

bs_glmnet <- coef(fit_glmnet_s)

# Compare estimated coefficients
round(
      data.frame(
        manual = c(b0 = bs_hat_r4[1], b = bs_hat_r4[-1]),
        glmnet = c(b0 = bs_glmnet[1], b = bs_glmnet[-1])
      ),
      3
)

```
# TL;DR, just give me the code!
```{r TLDR, ref.label=knitr::all_labels(), echo=TRUE, eval=FALSE}
```